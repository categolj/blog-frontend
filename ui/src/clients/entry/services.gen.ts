// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { $OpenApiTs } from './types.gen';

export class EntryService {
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @param data.excludeContent
     * @returns Entry OK
     * @throws ApiError
     */
    public static getEntryForTenant(data: $OpenApiTs['/tenants/{tenantId}/entries/{entryId}']['get']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/entries/{entryId}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries/{entryId}',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static putEntryFromMarkdownForTenant1(data: $OpenApiTs['/tenants/{tenantId}/entries/{entryId}']['put']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/entries/{entryId}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/tenants/{tenantId}/entries/{entryId}',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static deleteEntryForTenant(data: $OpenApiTs['/tenants/{tenantId}/entries/{entryId}']['delete']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/entries/{entryId}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/tenants/{tenantId}/entries/{entryId}',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.excludeContent
     * @param data.ifModifiedSince
     * @returns Entry OK
     * @throws ApiError
     */
    public static getEntry(data: $OpenApiTs['/entries/{entryId}']['get']['req']): CancelablePromise<$OpenApiTs['/entries/{entryId}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries/{entryId}',
            path: {
                entryId: data.entryId
            },
            headers: {
                'If-Modified-Since': data.ifModifiedSince
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static putEntryFromMarkdown1(data: $OpenApiTs['/entries/{entryId}']['put']['req']): CancelablePromise<$OpenApiTs['/entries/{entryId}']['put']['res'][200]> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/entries/{entryId}',
            path: {
                entryId: data.entryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @returns unknown OK
     * @throws ApiError
     */
    public static deleteEntry(data: $OpenApiTs['/entries/{entryId}']['delete']['req']): CancelablePromise<$OpenApiTs['/entries/{entryId}']['delete']['res'][200]> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/entries/{entryId}',
            path: {
                entryId: data.entryId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @param data.query
     * @param data.tag
     * @param data.categories
     * @param data.createdBy
     * @param data.updatedBy
     * @param data.excludeContent
     * @param data.page
     * @param data.size
     * @param data.cursor
     * @returns unknown OK
     * @throws ApiError
     */
    public static getEntriesForTenant1(data: $OpenApiTs['/tenants/{tenantId}/entries']['get']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/entries']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries',
            path: {
                tenantId: data.tenantId
            },
            query: {
                query: data.query,
                tag: data.tag,
                categories: data.categories,
                createdBy: data.createdBy,
                updatedBy: data.updatedBy,
                excludeContent: data.excludeContent,
                page: data.page,
                size: data.size,
                cursor: data.cursor
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postEntryFromMarkdownForTenant1(data: $OpenApiTs['/tenants/{tenantId}/entries']['post']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/entries']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/tenants/{tenantId}/entries',
            path: {
                tenantId: data.tenantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.tag
     * @param data.categories
     * @param data.createdBy
     * @param data.updatedBy
     * @param data.excludeContent
     * @param data.page
     * @param data.size
     * @param data.cursor
     * @returns unknown OK
     * @throws ApiError
     */
    public static getEntries1(data: $OpenApiTs['/entries']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/entries']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries',
            query: {
                query: data.query,
                tag: data.tag,
                categories: data.categories,
                createdBy: data.createdBy,
                updatedBy: data.updatedBy,
                excludeContent: data.excludeContent,
                page: data.page,
                size: data.size,
                cursor: data.cursor
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postEntryFromMarkdown1(data: $OpenApiTs['/entries']['post']['req']): CancelablePromise<$OpenApiTs['/entries']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/entries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @param data.excludeContent
     * @returns string OK
     * @throws ApiError
     */
    public static getEntryAsMarkdownForTenant(data: $OpenApiTs['/tenants/{tenantId}/entries/{entryId}.md']['get']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/entries/{entryId}.md']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries/{entryId}.md',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static exportEntriesForTenant(data: $OpenApiTs['/tenants/{tenantId}/entries.zip']['get']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/entries.zip']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries.zip',
            path: {
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.excludeContent
     * @returns string OK
     * @throws ApiError
     */
    public static getEntryAsMarkdown(data: $OpenApiTs['/entries/{entryId}.md']['get']['req']): CancelablePromise<$OpenApiTs['/entries/{entryId}.md']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries/{entryId}.md',
            path: {
                entryId: data.entryId
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static getTemplateMarkdown(): CancelablePromise<$OpenApiTs['/entries/template.md']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries/template.md',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static exportEntries(): CancelablePromise<$OpenApiTs['/entries.zip']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries.zip',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class WebhookService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns number OK
     * @throws ApiError
     */
    public static webhook(data: $OpenApiTs['/webhook']['post']['req']): CancelablePromise<$OpenApiTs['/webhook']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.xHubSignature256
     * @param data.tenantId
     * @param data.requestBody
     * @returns number OK
     * @throws ApiError
     */
    public static webhookForTenant(data: $OpenApiTs['/tenants/{tenantId}/webhook']['post']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/webhook']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/tenants/{tenantId}/webhook',
            path: {
                tenantId: data.tenantId
            },
            headers: {
                'X-Hub-Signature-256': data.xHubSignature256
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class AdminService {
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @param data.from
     * @param data.to
     * @returns string OK
     * @throws ApiError
     */
    public static importEntriesForTenant(data: $OpenApiTs['/tenants/{tenantId}/admin/import']['post']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/admin/import']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/tenants/{tenantId}/admin/import',
            path: {
                tenantId: data.tenantId
            },
            query: {
                from: data.from,
                to: data.to
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.from
     * @param data.to
     * @returns string OK
     * @throws ApiError
     */
    public static importEntries(data: $OpenApiTs['/admin/import']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/admin/import']['post']['res'][200]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/admin/import',
            query: {
                from: data.from,
                to: data.to
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class TagService {
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @returns TagAndCount OK
     * @throws ApiError
     */
    public static tagsForTenant(data: $OpenApiTs['/tenants/{tenantId}/tags']['get']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/tags']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/tags',
            path: {
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns TagAndCount OK
     * @throws ApiError
     */
    public static tags(): CancelablePromise<$OpenApiTs['/tags']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tags',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class CategoryService {
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @returns Category OK
     * @throws ApiError
     */
    public static categoriesForTenant(data: $OpenApiTs['/tenants/{tenantId}/categories']['get']['req']): CancelablePromise<$OpenApiTs['/tenants/{tenantId}/categories']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/categories',
            path: {
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns Category OK
     * @throws ApiError
     */
    public static categories(): CancelablePromise<$OpenApiTs['/categories']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class InfoService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static info(): CancelablePromise<$OpenApiTs['/info']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/info',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}