// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetEntryForTenantData, GetEntryForTenantResponse, PutEntryFromMarkdownForTenant1Data, PutEntryFromMarkdownForTenant1Response, DeleteEntryForTenantData, DeleteEntryForTenantResponse, GetEntryData, GetEntryResponse, PutEntryFromMarkdown1Data, PutEntryFromMarkdown1Response, DeleteEntryData, DeleteEntryResponse, GetEntriesForTenant1Data, GetEntriesForTenant1Response, PostEntryFromMarkdownForTenant1Data, PostEntryFromMarkdownForTenant1Response, GetEntries1Data, GetEntries1Response, PostEntryFromMarkdown1Data, PostEntryFromMarkdown1Response, GetEntryAsMarkdownForTenantData, GetEntryAsMarkdownForTenantResponse, ExportEntriesForTenantData, ExportEntriesForTenantResponse, GetEntryAsMarkdownData, GetEntryAsMarkdownResponse, GetTemplateMarkdownResponse, ExportEntriesResponse, WebhookData, WebhookResponse, WebhookForTenantData, WebhookForTenantResponse, ImportEntriesForTenantData, ImportEntriesForTenantResponse, ImportEntriesData, ImportEntriesResponse, TagsForTenantData, TagsForTenantResponse, TagsResponse, CategoriesForTenantData, CategoriesForTenantResponse, CategoriesResponse, InfoResponse } from './types.gen';

export class EntryService {
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @param data.excludeContent
     * @returns Entry OK
     * @throws ApiError
     */
    public static getEntryForTenant(data: GetEntryForTenantData): CancelablePromise<GetEntryForTenantResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries/{entryId}',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static putEntryFromMarkdownForTenant1(data: PutEntryFromMarkdownForTenant1Data): CancelablePromise<PutEntryFromMarkdownForTenant1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/tenants/{tenantId}/entries/{entryId}',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static deleteEntryForTenant(data: DeleteEntryForTenantData): CancelablePromise<DeleteEntryForTenantResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/tenants/{tenantId}/entries/{entryId}',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.excludeContent
     * @param data.ifModifiedSince
     * @returns Entry OK
     * @throws ApiError
     */
    public static getEntry(data: GetEntryData): CancelablePromise<GetEntryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries/{entryId}',
            path: {
                entryId: data.entryId
            },
            headers: {
                'If-Modified-Since': data.ifModifiedSince
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static putEntryFromMarkdown1(data: PutEntryFromMarkdown1Data): CancelablePromise<PutEntryFromMarkdown1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/entries/{entryId}',
            path: {
                entryId: data.entryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @returns unknown OK
     * @throws ApiError
     */
    public static deleteEntry(data: DeleteEntryData): CancelablePromise<DeleteEntryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/entries/{entryId}',
            path: {
                entryId: data.entryId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @param data.query
     * @param data.tag
     * @param data.categories
     * @param data.createdBy
     * @param data.updatedBy
     * @param data.excludeContent
     * @param data.page
     * @param data.size
     * @param data.cursor
     * @returns unknown OK
     * @throws ApiError
     */
    public static getEntriesForTenant1(data: GetEntriesForTenant1Data): CancelablePromise<GetEntriesForTenant1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries',
            path: {
                tenantId: data.tenantId
            },
            query: {
                query: data.query,
                tag: data.tag,
                categories: data.categories,
                createdBy: data.createdBy,
                updatedBy: data.updatedBy,
                excludeContent: data.excludeContent,
                page: data.page,
                size: data.size,
                cursor: data.cursor
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postEntryFromMarkdownForTenant1(data: PostEntryFromMarkdownForTenant1Data): CancelablePromise<PostEntryFromMarkdownForTenant1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/tenants/{tenantId}/entries',
            path: {
                tenantId: data.tenantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.tag
     * @param data.categories
     * @param data.createdBy
     * @param data.updatedBy
     * @param data.excludeContent
     * @param data.page
     * @param data.size
     * @param data.cursor
     * @returns unknown OK
     * @throws ApiError
     */
    public static getEntries1(data: GetEntries1Data = {}): CancelablePromise<GetEntries1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries',
            query: {
                query: data.query,
                tag: data.tag,
                categories: data.categories,
                createdBy: data.createdBy,
                updatedBy: data.updatedBy,
                excludeContent: data.excludeContent,
                page: data.page,
                size: data.size,
                cursor: data.cursor
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postEntryFromMarkdown1(data: PostEntryFromMarkdown1Data): CancelablePromise<PostEntryFromMarkdown1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/entries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.tenantId
     * @param data.excludeContent
     * @returns string OK
     * @throws ApiError
     */
    public static getEntryAsMarkdownForTenant(data: GetEntryAsMarkdownForTenantData): CancelablePromise<GetEntryAsMarkdownForTenantResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries/{entryId}.md',
            path: {
                entryId: data.entryId,
                tenantId: data.tenantId
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static exportEntriesForTenant(data: ExportEntriesForTenantData): CancelablePromise<ExportEntriesForTenantResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/entries.zip',
            path: {
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.excludeContent
     * @returns string OK
     * @throws ApiError
     */
    public static getEntryAsMarkdown(data: GetEntryAsMarkdownData): CancelablePromise<GetEntryAsMarkdownResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries/{entryId}.md',
            path: {
                entryId: data.entryId
            },
            query: {
                excludeContent: data.excludeContent
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static getTemplateMarkdown(): CancelablePromise<GetTemplateMarkdownResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries/template.md',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static exportEntries(): CancelablePromise<ExportEntriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/entries.zip',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class WebhookService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns number OK
     * @throws ApiError
     */
    public static webhook(data: WebhookData): CancelablePromise<WebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.xHubSignature256
     * @param data.tenantId
     * @param data.requestBody
     * @returns number OK
     * @throws ApiError
     */
    public static webhookForTenant(data: WebhookForTenantData): CancelablePromise<WebhookForTenantResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/tenants/{tenantId}/webhook',
            path: {
                tenantId: data.tenantId
            },
            headers: {
                'X-Hub-Signature-256': data.xHubSignature256
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class AdminService {
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @param data.from
     * @param data.to
     * @returns string OK
     * @throws ApiError
     */
    public static importEntriesForTenant(data: ImportEntriesForTenantData): CancelablePromise<ImportEntriesForTenantResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/tenants/{tenantId}/admin/import',
            path: {
                tenantId: data.tenantId
            },
            query: {
                from: data.from,
                to: data.to
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.from
     * @param data.to
     * @returns string OK
     * @throws ApiError
     */
    public static importEntries(data: ImportEntriesData = {}): CancelablePromise<ImportEntriesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/admin/import',
            query: {
                from: data.from,
                to: data.to
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class TagService {
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @returns TagAndCount OK
     * @throws ApiError
     */
    public static tagsForTenant(data: TagsForTenantData): CancelablePromise<TagsForTenantResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/tags',
            path: {
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns TagAndCount OK
     * @throws ApiError
     */
    public static tags(): CancelablePromise<TagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tags',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class CategoryService {
    /**
     * @param data The data for the request.
     * @param data.tenantId
     * @returns Category OK
     * @throws ApiError
     */
    public static categoriesForTenant(data: CategoriesForTenantData): CancelablePromise<CategoriesForTenantResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tenants/{tenantId}/categories',
            path: {
                tenantId: data.tenantId
            },
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
    /**
     * @returns Category OK
     * @throws ApiError
     */
    public static categories(): CancelablePromise<CategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}

export class InfoService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static info(): CancelablePromise<InfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/info',
            errors: {
                400: 'Bad Request',
                403: 'Forbidden',
                500: 'Internal Server Error',
                503: 'Service Unavailable'
            }
        });
    }
    
}