// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetNoteByEntryIdData, GetNoteByEntryIdResponse, PutNoteData, PutNoteResponse, SubscribeData, SubscribeResponse, GetNotesResponse, DeleteByEntryIdData, DeleteByEntryIdResponse, GetNoteByNoteIdData, GetNoteByNoteIdResponse, CreateReaderData, CreateReaderResponse, ActivateData, ActivateResponse, ResetData, ResetResponse, SendLinkData, SendLinkResponse, TokenData, TokenResponse, InfoResponse } from './types.gen';

export class NoteService {
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @returns NoteDetails OK
     * @throws ApiError
     */
    public static getNoteByEntryId(data: GetNoteByEntryIdData): CancelablePromise<GetNoteByEntryIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/notes/{entryId}',
            path: {
                entryId: data.entryId
            },
            errors: {
                403: 'Forbidden'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static putNote(data: PutNoteData): CancelablePromise<PutNoteResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/notes/{entryId}',
            path: {
                entryId: data.entryId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.noteId
     * @returns SubscribeOutput OK
     * @throws ApiError
     */
    public static subscribe(data: SubscribeData): CancelablePromise<SubscribeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/notes/{noteId}/subscribe',
            path: {
                noteId: data.noteId
            }
        });
    }
    
    /**
     * @returns NoteSummary OK
     * @throws ApiError
     */
    public static getNotes(): CancelablePromise<GetNotesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/notes'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entryId
     * @returns ResponseMessage OK
     * @throws ApiError
     */
    public static deleteByEntryId(data: DeleteByEntryIdData): CancelablePromise<DeleteByEntryIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/notes',
            query: {
                entryId: data.entryId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.noteId
     * @returns NoteDetails OK
     * @throws ApiError
     */
    public static getNoteByNoteId(data: GetNoteByNoteIdData): CancelablePromise<GetNoteByNoteIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/notes/{noteId}',
            path: {
                noteId: data.noteId
            },
            errors: {
                403: 'Forbidden'
            }
        });
    }
    
}

export class ReaderService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ResponseMessage OK
     * @throws ApiError
     */
    public static createReader(data: CreateReaderData): CancelablePromise<CreateReaderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/readers',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.readerId
     * @param data.activationLinkId
     * @returns ResponseMessage OK
     * @throws ApiError
     */
    public static activate(data: ActivateData): CancelablePromise<ActivateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/readers/{readerId}/activations/{activationLinkId}',
            path: {
                readerId: data.readerId,
                activationLinkId: data.activationLinkId
            },
            errors: {
                403: 'Forbidden'
            }
        });
    }
    
}

export class PasswordResetService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ResponseMessage OK
     * @throws ApiError
     */
    public static reset(data: ResetData): CancelablePromise<ResetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/password_reset',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ResponseMessage OK
     * @throws ApiError
     */
    public static sendLink(data: SendLinkData): CancelablePromise<SendLinkResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/password_reset/send_link',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class TokenService {
    /**
     * @param data The data for the request.
     * @param data.input
     * @returns OAuth2Token OK
     * @throws ApiError
     */
    public static token(data: TokenData): CancelablePromise<TokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/oauth/token',
            query: {
                input: data.input
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class InfoService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static info(): CancelablePromise<InfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/info'
        });
    }
    
}