// This file is auto-generated by @hey-api/openapi-ts

export type PutNoteInput = {
    noteId?: string;
    noteUrl?: string;
};

export type CreateReaderInput = {
    email?: string;
    rawPassword?: string;
};

export type ResponseMessage = {
    message: string;
};

export type ReaderId = {
    readerId: string;
};

export type ActivationLinkId = {
    activationLinkId: string;
};

export type PasswordResetInput = {
    resetId?: string;
    newPassword?: string;
};

export type SendLinkInput = {
    email?: string;
};

export type TokenInput = {
    username?: string;
    password?: string;
};

export type OAuth2Error = {
    error_description: string;
    error: string;
};

export type OAuth2Token = {
    access_token: string;
    token_type: string;
    expires_in: number;
    scope: Array<(string)>;
};

export type NoteId = {
    noteId?: string;
};

export type SubscribeOutput = {
    entryId: number;
    subscribed: boolean;
};

export type NoteSummary = {
    noteId?: string;
    entryId: number;
    title?: string;
    noteUrl: string;
    subscribed: boolean;
    updatedDate?: string;
};

export type Author = {
    name: string;
    date: string;
};

export type FrontMatter = {
    title: string;
};

export type NoteDetails = {
    noteId?: string;
    entryId: number;
    content: string;
    frontMatter: FrontMatter;
    noteUrl: string;
    created?: Author;
    updated: Author;
};

export type ErrorResponse = {
    message: string;
    noteUrl: string;
};

export type GetNoteByEntryIdData = {
    entryId: number;
};

export type GetNoteByEntryIdResponse = NoteDetails;

export type PutNoteData = {
    entryId: number;
    requestBody: PutNoteInput;
};

export type PutNoteResponse = unknown;

export type SubscribeData = {
    noteId: NoteId;
};

export type SubscribeResponse = SubscribeOutput;

export type GetNotesResponse = Array<NoteSummary>;

export type DeleteByEntryIdData = {
    entryId: number;
};

export type DeleteByEntryIdResponse = ResponseMessage;

export type GetNoteByNoteIdData = {
    noteId: NoteId;
};

export type GetNoteByNoteIdResponse = NoteDetails;

export type CreateReaderData = {
    requestBody: CreateReaderInput;
};

export type CreateReaderResponse = ResponseMessage;

export type ActivateData = {
    activationLinkId: ActivationLinkId;
    readerId: ReaderId;
};

export type ActivateResponse = ResponseMessage;

export type ResetData = {
    requestBody: PasswordResetInput;
};

export type ResetResponse = ResponseMessage;

export type SendLinkData = {
    requestBody: SendLinkInput;
};

export type SendLinkResponse = ResponseMessage;

export type TokenData = {
    input: TokenInput;
};

export type TokenResponse = OAuth2Token;

export type InfoResponse = {
    [key: string]: {
        [key: string]: unknown;
    };
};

export type $OpenApiTs = {
    '/notes/{entryId}': {
        get: {
            req: {
                entryId: number;
            };
            res: {
                /**
                 * OK
                 */
                200: NoteDetails;
                /**
                 * Forbidden
                 */
                403: ErrorResponse;
            };
        };
        put: {
            req: {
                entryId: number;
                requestBody: PutNoteInput;
            };
            res: {
                /**
                 * OK
                 */
                200: unknown;
            };
        };
    };
    '/notes/{noteId}/subscribe': {
        post: {
            req: {
                noteId: NoteId;
            };
            res: {
                /**
                 * OK
                 */
                200: SubscribeOutput;
            };
        };
    };
    '/notes': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<NoteSummary>;
            };
        };
        delete: {
            req: {
                entryId: number;
            };
            res: {
                /**
                 * OK
                 */
                200: ResponseMessage;
            };
        };
    };
    '/notes/{noteId}': {
        get: {
            req: {
                noteId: NoteId;
            };
            res: {
                /**
                 * OK
                 */
                200: NoteDetails;
                /**
                 * Forbidden
                 */
                403: ErrorResponse;
            };
        };
    };
    '/readers': {
        post: {
            req: {
                requestBody: CreateReaderInput;
            };
            res: {
                /**
                 * OK
                 */
                200: ResponseMessage;
            };
        };
    };
    '/readers/{readerId}/activations/{activationLinkId}': {
        post: {
            req: {
                activationLinkId: ActivationLinkId;
                readerId: ReaderId;
            };
            res: {
                /**
                 * OK
                 */
                200: ResponseMessage;
                /**
                 * Forbidden
                 */
                403: ResponseMessage;
            };
        };
    };
    '/password_reset': {
        post: {
            req: {
                requestBody: PasswordResetInput;
            };
            res: {
                /**
                 * OK
                 */
                200: ResponseMessage;
            };
        };
    };
    '/password_reset/send_link': {
        post: {
            req: {
                requestBody: SendLinkInput;
            };
            res: {
                /**
                 * OK
                 */
                200: ResponseMessage;
            };
        };
    };
    '/oauth/token': {
        post: {
            req: {
                input: TokenInput;
            };
            res: {
                /**
                 * OK
                 */
                200: OAuth2Token;
                /**
                 * Unauthorized
                 */
                401: OAuth2Error;
            };
        };
    };
    '/info': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: {
                    [key: string]: {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
};